service: ${self:custom.appName}-restapi

provider:
    name: aws
    region: eu-west-1
    runtime: nodejs12.x
    stage: ${opt:stage,'dev'}
    logRetentionInDays: 30
    logs:
        httpApi: true
    httpApi:
        authorizers:
            cognitoJwtAuthorizer:
                identitySource: $request.header.Authorization
                issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${cf:${self:custom.infraStack}.UserPoolId}
                audience:
                - ${cf:${self:custom.infraStack}.UserPoolClientId}
    environment:
        STAGE: ${self:provider.stage}
        REGION: ${self:provider.region}
        API_GW_DOMAIN: !Ref HttpApi
        COGNITO_USER_POOL_ID: ${cf:${self:custom.infraStack}.UserPoolId}
        COGNITO_USER_POOL_CLIENT_ID: ${cf:${self:custom.infraStack}.UserPoolClientId}
        DDB_TABLE_CLUBS: ${cf:${self:custom.infraStack}.DDBTableClubs}
        DDB_TABLE_MEMBERS: ${cf:${self:custom.infraStack}.DDBTableMembers}
        EVENTBRIDGE_SERVICE_BUS_NAME: ${cf:${self:custom.infraStack}.ServiceBus}
        OUTBOUND_EMAILS_QUEUE_URL: ${cf:${self:custom.infraStack}.OutboundEmailsQueueUrl}
        OUTBOUND_EMAILS_DLQ_URL: ${cf:${self:custom.infraStack}.OutboundEmailsDLQUrl}
        DEFAULT_FROM_EMAIL: paul@serverlessfirst.com
        S3_MEDIA_BUCKET: ${cf:${self:custom.infraStack}.MediaBucket}
        S3_MEDIA_BUCKET_CLUB_PROFILES_PREFIX: "club-profiles/"

custom:
    appName: TestingWorkshop
    infraStack: ${self:custom.appName}-infra-${self:provider.stage}
    awsAccountId: ${cf:${self:custom.infraStack}.AWSAccountId}
    defaultApiAuthorizer:
        name: cognitoJwtAuthorizer
    esbuild:
        bundle: true
        target: es2018
        exclude: []

package:
    individually: true

functions:

    # =================================================================
    # API Gateway handlers
    # =================================================================
    # === /me
    httpMeGet:
        handler: src/handlers/http/me/index.get
        events:
        -   httpApi:
                path: /me
                method: GET
                authorizer: ${self:custom.defaultApiAuthorizer}
    httpMeClubsGet:
        handler: src/handlers/http/me/clubs/index.get
        events:
        -   httpApi:
                path: /me/clubs
                method: GET
                authorizer: ${self:custom.defaultApiAuthorizer}
        iamRoleStatements:
        -   Effect: Allow
            Action:
                - dynamodb:Query
            Resource:
                - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableClubs}*

    # === /clubs
    httpClubsGet:
        handler: src/handlers/http/clubs/index.get
        events:
        -   httpApi:
                path: /clubs
                method: GET
        iamRoleStatements:
        -   Effect: Allow
            Action:
                - dynamodb:Query
            Resource:
                - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableClubs}*

    httpClubsMemberJoin:
        handler: src/handlers/http/clubs/club-id/join/index.post
        events:
        -   httpApi:
                path: /clubs/{clubId}/join
                method: POST
                authorizer: ${self:custom.defaultApiAuthorizer}
        iamRoleStatements:
        -   Effect: Allow
            Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:PutItem
            Resource:
                - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableClubs}*
                - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableMembers}*

    # =================================================================
    # EventBridge handlers
    # =================================================================
    ebNotifyMemberJoined:
        handler: src/handlers/eventbridge/notify-member-joined.handler
        events:
        - eventBridge:
            eventBus: ${cf:${self:custom.infraStack}.ServiceBusArn}
            pattern:
                source:
                    - 'rest-api'
                detail-type:
                    - MEMBER_JOINED_CLUB
        iamRoleStatements:
        -   Effect: Allow
            Action:
                - dynamodb:GetItem
                - dynamodb:Query
            Resource:
                - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableMembers}*
        -   Effect: Allow
            Action:
                - sqs:SendMessage
            Resource:
                - ${cf:${self:custom.infraStack}.OutboundEmailsQueueArn}
    ebWelcomeMember:
        handler: src/handlers/eventbridge/welcome-member.handler
        events:
        - eventBridge:
            eventBus: ${cf:${self:custom.infraStack}.ServiceBusArn}
            pattern:
                source:
                    - 'rest-api'
                detail-type:
                    - MEMBER_JOINED_CLUB
        iamRoleStatements:
        -   Effect: Allow
            Action:
                - dynamodb:GetItem
                - dynamodb:Query
            Resource:
                - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableMembers}*
        -   Effect: Allow
            Action:
                - sqs:SendMessage
            Resource:
                - ${cf:${self:custom.infraStack}.OutboundEmailsQueueArn}

    # =================================================================
    # S3 event handlers
    # =================================================================
    s3ProcessProfilePhoto:
        handler: src/handlers/s3/process-profile-photo.handler
        events:
        - s3:
            bucket: ${cf:${self:custom.infraStack}.MediaBucket}
            event: s3:ObjectCreated:*
            rules:
                - prefix: ${self:provider.environment.S3_MEDIA_BUCKET_CLUB_PROFILES_PREFIX}
            existing: true
        iamRoleStatements:
        -   Effect: Allow
            Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Update*
            Resource:
                - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableClubs}*

    # =================================================================
    # SQS event handlers
    # =================================================================
    sqsDeliverEmail:
        handler: src/handlers/sqs/deliver-email.handler
        timeout: 6 # ~ 1/3 of queue's VisibilityTimeout
        events:
            - sqs:
                arn: ${cf:${self:custom.infraStack}.OutboundEmailsQueueArn}
                batchSize: 10 # max number of messages passed to single Lambda invocation
        iamRoleStatements:
        -   Effect: Allow
            Action:
                - ses:SendEmail
            Resource:
                - arn:aws:ses:${self:provider.region}:${self:custom.awsAccountId}:identity/${self:provider.environment.DEFAULT_FROM_EMAIL}

    # =================================================================
    # DynamoDB stream handlers
    # =================================================================
    ddbProcessNewMember:
        handler: src/handlers/ddb/process-new-member.handler
        events:
            - stream:
                type: dynamodb
                arn: ${cf:${self:custom.infraStack}.DDBTableMembersStreamArn}
                bisectBatchOnFunctionError: true # split batch in 2 if function returns error
                maximumRetryAttempts: 3
                batchSize: 10 # Upper limit of EventBridge.PutEvents.Entries
                destinations:
                    # Capture failed messages to DLQ
                    onFailure: ${cf:${self:custom.infraStack}.DDBMembersStreamDLQArn}
        iamRoleStatements:
        -   Effect: Allow
            Action:
                - events:PutEvents
            Resource:
                - ${cf:${self:custom.infraStack}.ServiceBusArn}
        -   Effect: Allow
            Action:
                - sqs:SendMessage
            Resource:
                - ${cf:${self:custom.infraStack}.DDBMembersStreamDLQArn}

resources:
    ${file(./resources/e2e-test-resources.js)}

plugins:
- serverless-esbuild
- serverless-export-env
- serverless-iam-roles-per-function
